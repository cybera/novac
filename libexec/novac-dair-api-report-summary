#!/usr/bin/env ruby

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'mysql2'
require 'rubygems'
require 'terminal-table'
require 'novadb2'
require 'helpers/projects'
require 'csv'

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Get the region and an optional logrotated file
region = %x{ facter location }.chomp

report_date = nil
if ARGV.length > 0
  report_date = ARGV[0].downcase
end

if region != "alberta" && region != "quebec"
  puts "Must either specify alberta or quebec"
  exit 1
end

novadb = NovaDB2.instance
db = novadb.clouds[region]['mysql']['nova']
api_db = Mysql2::Client.new( :host => db[:host], :username => db[:user], :password => db[:password], :database => 'api_reports' )

# Get the OpenStack Query Library
os_release = novadb.get_openstack_release
require "openstack/#{os_release}"
openstack = Object.const_get(os_release.capitalize).new

projects = Projects.new.projects
rows = []

now = nil
if report_date
  now = Date.parse(report_date)
else
  now = Date.today
end

year = now.year
month = now.month
day = now.day
now_formatted = "#{year}-#{month}-#{day}"
file_name = "api-summary-#{now_formatted}.csv"

end_date = now+1
end_year = end_date.year
end_month = end_date.month
end_day = end_date.day
end_date_formatted = "#{end_year}-#{end_month}-#{end_day}"


results = {}
rows = api_db.query "select date_format(log_date, '%Y-%m-%d %H:59:59') as d, service, tenant_id, request_type, count(request_type) as request_count from log where log_date > '#{now_formatted}' and log_date < '#{end_date_formatted}' and ip != '208.75.75.119' and tenant_id != 'GET' and tenant_id != 'wsgi' group by d, tenant_id, service order by log_date"
rows.each do |row|
  date = row['d']
  service = row['service']
  tenant_id = row['tenant_id']
  request_type = row['request_type']
  request_count = row['request_count']

  unless results.key?(date)
    results[date] = {}
  end

  unless results[date].key?(tenant_id)
    results[date][tenant_id] = {}
  end

  unless results[date][tenant_id].key?(service)
    results[date][tenant_id][service] = {}
  end

  results[date][tenant_id][service][request_type] = request_count
end

dates = results.keys.sort

# Write the report to a CSV file
CSV.open("/tmp/swift_api_summary.csv", "wb") do |csv|
  dates.each do |date|
    results[date].each do |tenant_id, services|
      counts = []
      ['servers', 'volumes', 'object'].each do |service|
        if services.key?(service)
          ['GET', 'POST', 'PUT', 'DELETE'].each do |request_type|
            if services[service].key?(request_type)
              counts << services[service][request_type]
            else
              counts << 0
            end
          end
        else
          counts << 0
          counts << 0
          counts << 0
          counts << 0
        end
      end

      if counts.length > 0
        row = [date, tenant_id] + counts
        csv << row
      end
    end
  end
end

# Upload everything to Swift
# Configure Swift to build aggregated csv files on the fly
system <<-EOC
. /root/openrc
echo > /tmp/swift_placeholder.txt
swift post logs
#swift post -r '.r:*,.rlistings' logs
#swift post -m 'web-listings: true' logs
swift upload logs --object-name api_summary_segments/#{region}-#{year}-#{month}-#{day}.csv /tmp/swift_api_summary.csv
swift upload -H 'X-Object-Manifest: logs/api_summary_segments/#{region}-#{year}-' logs --object-name api_summary/#{region}/#{region}-#{year}.csv /tmp/swift_placeholder.txt
swift upload -H 'X-Object-Manifest: logs/api_summary_segments/#{region}-#{year}-#{month}-' logs --object-name api_summary/#{region}/#{year}/#{region}-#{year}-#{month}.csv /tmp/swift_placeholder.txt
swift upload -H 'X-Object-Manifest: logs/api_summary_segments/#{region}-#{year}-#{month}-#{day}' logs --object-name api_summary/#{region}/#{year}/#{month}/#{region}-#{year}-#{month}-#{day}.csv /tmp/swift_placeholder.txt
EOC
