#!/usr/bin/env ruby
$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'novadb'

# List of required libraries
required_libs = ['terminal-table','mysql']

# Try to load each of the libraries
# Fail if unable to and list what libs are needed
begin
  required_libs.each { |l| require l }
rescue LoadError
  puts "This script needs the following external libraries: "
  required_libs.each { |l| puts " * #{l}" }
  exit 1
end

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Get a list of clouds
novadb = NovaDB.new
clouds = novadb.clouds

rows = []
master = novadb.master_cloud
novadb.clouds.each do |region, creds|
  begin
    # Databases
    nova     = Mysql.new creds[:server], creds[:username], creds[:password], 'nova'
    keystone = Mysql.new master[:server], master[:username], master[:password], 'keystone'
    glance   = Mysql.new master[:server], master[:username], master[:password], 'glance'

    # Prepared statements
    user_query    = keystone.prepare "select name from user where id = ?"
    project_query = keystone.prepare "select name from project where id = ?"
    image_query   = glance.prepare "select name from images where id = ?"
    ec2_query     = nova.prepare "select id from instance_id_mappings where uuid = ?"

    # Query for all running instances
    instances_query = "select uuid, user_id, instances.project_id, hostname, instances.host, image_ref, fixed_ips.address as fixed_ip, floating_ips.address as floating_ip, vm_state, instance_types.name as flavor, key_name from instances inner join instance_types on instances.instance_type_id=instance_types.id inner join fixed_ips on instances.uuid=fixed_ips.instance_uuid left join floating_ips on fixed_ips.id=floating_ips.fixed_ip_id where instances.deleted = 0"

    instance_rs = nova.query instances_query
    instance_rs.each_hash do |row|
      # Shorten the Instance ID
      instance_id_short = row['uuid'].split('-')[0]

      # Shorten the host
      host_short = row['host'].split('.')[0]

      # Get user name
      user_query.execute row['user_id']
      user = user_query.fetch[0]

      # Project name
      project_query.execute row['project_id']
      project = project_query.fetch[0]

      # Image name
      image_query.execute row['image_ref']
      image = image_query.fetch[0]

      # ec2 id
      ec2_query.execute row['uuid']
      ec2_id = ec2_query.fetch[0].to_s(base=16).rjust(8, '0')


      # Build the output row
      rows << [instance_id_short, project, user, region, row['hostname'], ec2_id, host_short, row['fixed_ip'], row['floating_ip'], row['vm_state'], row['flavor'], row['key_name'], image]
    end
  ensure
    nova.close if nova
    keystone.close if keystone
    glance.close if glance
    user_query.close if user_query
    project_query.close if project_query
    image_query.close if image_query
  end
end

# Print report
headings = ['ID', 'Project', 'User', 'Region', 'Instance', 'EC2 ID', 'Host', 'Fixed IP', 'Floating IP', 'VM State', 'Flavor', 'Key', 'Image']

table = Terminal::Table.new :headings => headings, :rows => rows
puts table

