#!/usr/bin/env ruby
# Usage: novac list-volumes
# Summary: List all volumes in both regions
# Help: This command shows the ID, Name, Project, Status, Attach, Instance, Mountpoint, Size, Host, and Region

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'terminal-table'
require 'novadb2'
require 'helpers/projects'

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Get a list of clouds
novadb = NovaDB2.instance
projects = Projects.new.projects

# Get the OpenStack Query Library
os_release = novadb.get_openstack_release
require "openstack/#{os_release}"
openstack = Object.const_get(os_release.capitalize).new

rows = {}

novadb.regions.each do |region, creds|
  begin
    # In DAIR we have more projects than volumes, so we'll look up extra info per volume.
    # Not super performant but completely acceptable given the scale. Takes ~10 seconds to run.

    # Get the volume details
    volumes = openstack.volume_type_query(region)
    volumes.each do |row|
      # Get the project name
      project = projects[row[:project_id]]

      # Get the extra data from the user on a project
      email = ""
      if not row[:project_id]
        email = "Email not available"
      else
        extra_field = openstack.email_from_extra_field(row[:project_id])
        if extra_field.count == 1
          email = extra_field.first[:extra][11..-3]
        else
          email = "Email not available"
        end
      end

      # Get the quota for a project...
      # Or is this part of a Quotas object?
      volume_quota = 0
      if not row[:project_id]
        volume_quota = "Quota not available"
      else
        volume_result = openstack.cinder_project_quota(row[:project_id], region)
        # Catch if a quota is not set
        if volume_result.first
          volume_quota = volume_result[:gigabytes][:hard_limit]
        else
          volume_quota = "N/A"
        end
      end

      # Protection against nil projects
      if project == nil
        project = 'MISSING PROJECT'
      end

      # Build the output row
      if not rows.has_key?(project)
        rows[project] = []
      end
      rows[project] << [row[:id], project, email, row[:volume], row[:attach_status], row[:size], volume_quota, row[:volume_type], region]
    end
  end
end

# Print report
headings = ['ID', 'Project', 'Email', 'Name', 'Status', 'Size (GB)', 'Quota', 'Type', 'Region']

# Sort based on project
r = []
rows.keys.sort.each do |project|
  rows[project].each do |row|
    r << row
  end
end

table = Terminal::Table.new :headings => headings, :rows => r
puts table

