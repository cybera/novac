#!/usr/bin/env python
# Usage: novac swift-usage
# Summary: Lists swift usage by all users
# Help: Shows swift usage stats for all users. Does not require the reselleradmin role to be set up.

# Requires python-swiftclient, prettytable, and MySQL-python (MySQLdb) to be installed

import MySQLdb
import urllib
import json
import httplib2 as http
import ConfigParser
from swift.common.ring import Ring
from swift.common.utils import hash_path
from urlparse import urlparse
from prettytable import PrettyTable

tenants = {}
ring_file = '/etc/swift/account.ring.gz'
ring = Ring(ring_file)

h = http.Http()
method = 'HEAD'

table = PrettyTable(['Project', 'Containers', 'Objects', 'Space (MB)'])
table.align = 'r'
table.align['Project'] = 'l'
table.padding_width = 1
table.sortby = 'Project'
total_containers = 0
total_objects = 0
total_space = 0

ini = ConfigParser.RawConfigParser()
ini.readfp(open('/etc/novac/config.ini'))

# We only want to read info from keystone - which region doesn't matter since it's shared.
for section_name in ini.sections():
  if 'keystone' in section_name:
    break
  else:
    continue

keystone_db = MySQLdb.connect(host=ini.get(section_name,'host'), user=ini.get(section_name,'user'), passwd=ini.get(section_name,'password'), db=ini.get(section_name,'database'))

c = keystone_db.cursor()
c.execute('select id, name from project')
for r in c.fetchall():
  tenants[r[1]] = "AUTH_%s" % r[0]

for tenant in tenants.keys():
  account = tenants[tenant]
  containers = 0
  space = '0.00'
  hash_str = hash_path(account)
  part, nodes = ring.get_nodes(account)
  target = "%s" % (account)
  loc = 'accounts'
  node = nodes[0]
  x = "http://%s:%s/%s/%s/%s" % (node['ip'], node['port'], node['device'], part, urllib.quote(target))
  url = urlparse(x)
  try:
    response, content = h.request(url.geturl(), method, '')
  except:
    continue
  if response['status'] != '404':
    containers = response['x-account-container-count']
    objects = response['x-account-object-count']
    space = float(response['x-account-bytes-used']) / 1024 / 1024
    space = "%0.2f" % space
  total_objects += int(objects)
  total_containers += int(containers)
  total_space += float(space)
  table.add_row([tenant, containers, objects, space])

print table
print "Total: %s containers, %s objects, %s MB" % (total_containers, total_objects, total_space)
