#!/usr/bin/env ruby

# Usage: novac project-artifacts <project name>
# Summary: Lists all resources that a project has created (users, images, instances, volumes, floating ips)
# Help: "project name" is required.

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'novadb'
require 'projects'

required_libs = ['terminal-table','mysql2']

# Try to load each of the libraries
# Fail if unable to and list what libs are needed
begin
  required_libs.each { |l| require l }
rescue LoadError
  puts "This script needs the following external libraries: "
  required_libs.each { |l| puts " * #{l}" }
  exit 1
end

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Was a project name specified?
if ARGV[0]
  p = ARGV[0]
else
  puts "Project name or ID is required"
  exit 1
end

# All projects
projects = Projects.new.projects

# Was a UUID given?
project = projects[p]

# Was a project name given?
unless project
  project = projects.select { |k, v| v == p }
end

# Not found at all
unless project
  puts "Project not found"
  exit 1
end

# Objects
novadb = NovaDB.new
master = novadb.master_cloud

project_id = project[0][0]
project_name = p

puts "Project #{p}"
puts ""

project_list = Projects.new.users(project_id)
puts "Users (#{project_list.length})"
project_list.each do |user_id, user_name|
  puts "* #{user_name}"
end
puts ""

db = Mysql2::Client.new(:host => master[:server], :username => master[:username], :password => master[:password])
images_query = "select images.id, images.name as image_name from glance.images where glance.images.owner = '#{project_id}' order by images.name"

image_list = db.query(images_query)
puts "Images / Snapshots (#{image_list.count})"
image_list.each(:as => :hash) do |row|
  puts "* #{row['image_name']}"
end
puts ""
db.close()

novadb.clouds.each do |region, creds|
  db = Mysql2::Client.new(:host => creds[:server], :username => creds[:username], :password => creds[:password])

  instances_query = "select instances.id, instances.display_name from nova.instances where instances.project_id = '#{project_id}' and deleted = 0 order by display_name"
  instance_list = db.query(instances_query)
  puts "Instances in #{region} (#{instance_list.count})"
  instance_list.each(:as => :hash) do |row|
    puts "* #{row['display_name']}"
  end
  puts ""

  volumes_query = "select volumes.id, volumes.display_name from cinder.volumes where volumes.project_id = '#{project_id}' and deleted = 0 order by display_name"
  volume_list = db.query(volumes_query)
  puts "Volumes in #{region} (#{volume_list.count})"
  volume_list.each(:as => :hash) do |row|
    puts "* #{row['display_name']}"
  end
  puts ""

  floating_ip_query = "select address from nova.floating_ips where floating_ips.project_id = '#{project_id}' order by address"
  ip_list = db.query(floating_ip_query)
  puts "Floating IPs in #{region} (#{ip_list.count})"
  ip_list.each(:as => :hash) do |row|
    puts "* #{row['address']}"
  end
  puts ""

end
