#!/usr/bin/env ruby

# Usage: novac project-artifacts <project name>
# Summary: Lists all resources that a project has created (users, images, instances, volumes, floating ips)
# Help: "project name" is required.

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'novadb'
require 'projects'

required_libs = ['terminal-table','mysql2']

# Try to load each of the libraries
# Fail if unable to and list what libs are needed
begin
  required_libs.each { |l| require l }
rescue LoadError
  puts "This script needs the following external libraries: "
  required_libs.each { |l| puts " * #{l}" }
  exit 1
end

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Was a project name specified?
if ARGV[0]
  p = ARGV[0]
else
  puts "Project name is required"
  exit 1
end

project = Projects.new.projects.select { |k, v| v == p }

unless project
  puts "Project not found"
  exit 1
end

# Objects
novadb = NovaDB.new
cloud = novadb.cloud

project_id = project.keys[0]
project_name = p

puts "Project #{p}"
puts ""

puts "Users"
Projects.new.users(project_id).each do |user_id, user_name|
  puts "* #{user_name}"
end
puts ""

db = Mysql2::Client.new(:host => cloud[:server], :username => cloud[:username], :password => cloud[:password])
images_query = "select images.id, images.name as image_name from glance.images where glance.images.owner = '#{project_id}' order by images.name"

puts "Images / Snapshots"
db.query(images_query).each(:as => :hash) do |row|
  puts "* #{row['image_name']}"
end
puts ""

novadb.regions.each do |region|
  puts "Instances in #{region}"
  instances_query = "select instances.id, instances.display_name from nova_#{region}.instances where instances.project_id = '#{project_id}' and deleted = 0 order by display_name"
  db.query(instances_query).each(:as => :hash) do |row|
    puts "* #{row['display_name']}"
  end
  puts ""

  puts "Volumes in #{region}"
  volumes_query = "select volumes.id, volumes.display_name from cinder_#{region}.volumes where volumes.project_id = '#{project_id}' and deleted = 0 order by display_name"
  db.query(volumes_query).each(:as => :hash) do |row|
    puts "* #{row['display_name']}"
  end
  puts ""

  puts "Floating IPs in #{region}"
  floating_ip_query = "select address from nova_#{region}.floating_ips where floating_ips.project_id = '#{project_id}' order by address"
  db.query(floating_ip_query).each(:as => :hash) do |row|
    puts "* #{row['address']}"
  end
  puts ""

end
