#!/usr/bin/env ruby

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'terminal-table'
require 'novadb2'
require 'helpers/projects'
require 'csv'

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Get the region and an optional logrotated file
region = %x{ facter location }.chomp

file = ""
if ARGV.length > 0
  file = ".#{ARGV[0].downcase}"
end

if region != "alberta" && region != "quebec"
  puts "Must either specify alberta or quebec"
  exit 1
end

# Figure out the correct directory for the logs
nova_log_dir = ""
swift_log_dir = ""
if region == "alberta"
  nova_log_dir = "nova-ab"
  swift_log_dir = "swift-ab"
else
  log_dir = "nova-qc"
  swift_log_dir = "swift-qc"
end

novadb = NovaDB2.instance

# Get the OpenStack Query Library
os_release = novadb.get_openstack_release
require "openstack/#{os_release}"
openstack = Object.const_get(os_release.capitalize).new

projects = Projects.new.projects
rows = []

# Add tenant names to ignore here
ignore_projects = ["nagioscheck"]

# Build a map of services and how to parse their log files
api_queries = {
  'nova' => "zgrep nova.osapi_compute.wsgi.server /opt/rsyslog/#{nova_log_dir}/nova.log#{file} | awk '{print $4, $5, $6, $12, $13, $14, $15}' | sed -e 's/\]//g' -e 's/,127.0.0.1//g' -e 's/\"//g'",
  'cinder' =>  "zgrep eventlet.wsgi.server /opt/rsyslog/#{nova_log_dir}/cinder.log#{file} | awk '{print $4, $5, $6, $12, $16, $21, $22}'  | grep -v accepted | sed -e 's/,127.0.0.1//g' -e 's/\"//g'",
  'swift' => "zgrep -E 'GET|POST|PUT|DELETE' /opt/rsyslog/#{swift_log_dir}/swift.log#{file} | awk '{print $4, $6, $8, $9, $10}' | grep -v headers",
}

# Swift tenant IDs must be pulled from a substring
swift_tenant_id_re = /AUTH_([a-z0-9]+)/

# For each of the services, parse their log files
# Store the result in "rows"
file_date = nil
api_queries.each do |api, query|
  output = `#{query}`
  output.split("\n").each do |row|

    case api
    when "swift"
      begin
        server, ip, date, req_type, req = row.split
        day, month, year, hour, minute, second = date.split('/')
        date = Time.utc(year, month, day, hour, minute, second).getlocal.strftime("%Y/%m/%d/%H/%M/%S")
        year, month, day, hour, minute, second = date.split('/')
        time = "#{hour}:#{minute}:#{second}"
        match = req.match swift_tenant_id_re
        tenant_id = match[1]
        tenant_name = projects[tenant_id]
      rescue
        next
      end
    else
      begin
        server, date, time, tenant_id, ip, req_type, req = row.split
        year, month, day = date.split('-')
        time = time.split('.')[0]
        tenant_name = projects[tenant_id]
      rescue
      rescue
        next
      end
    end

    next if ignore_projects.include?(tenant_name)

    date = "#{year}/#{month}/#{day}"
    date_time = "#{date} #{time}"
    rows << [date_time, region, api, tenant_id, tenant_name, ip, req_type, req]

    if file_date.nil?
      file_date = date
    end
  end

end

# Sort all of the rows by the first element (date_time)
rows.sort! do |a,b|
  a[0] <=> b[0]
end

# Get the date of the first record in the log
# This is to help support archiving old log files
year, month, day = file_date.split('/')

# Write the rows to a csv file
CSV.open("/tmp/swift_api_logs.csv", "wb") do |csv|
  rows.each do |row|
    csv << row
  end
end

# Upload everything to Swift
# Configure Swift to build aggregated csv files on the fly
system <<-EOC
. /root/openrc
echo > /tmp/swift_placeholder.txt
swift post logs
#swift post -r '.r:*,.rlistings' logs
#swift post -m 'web-listings: true' logs
echo Date,Region,Service,Tenant ID,Tenant,IP,Request Type,Request > /tmp/swift_api_headers.txt
swift upload logs --object-name api_segments/#{region}-#{year}-#{month}-#{day}.csv /tmp/swift_api_logs.csv
swift upload -H 'X-Object-Manifest: logs/api_segments/#{region}-#{year}-' logs --object-name api/#{region}/#{region}-#{year}.csv /tmp/swift_placeholder.txt
swift upload -H 'X-Object-Manifest: logs/api_segments/#{region}-#{year}-#{month}-' logs --object-name api/#{region}/#{year}/#{region}-#{year}-#{month}.csv /tmp/swift_placeholder.txt
swift upload -H 'X-Object-Manifest: logs/api_segments/#{region}-#{year}-#{month}-#{day}' logs --object-name api/#{region}/#{year}/#{month}/#{region}-#{year}-#{month}-#{day}.csv /tmp/swift_placeholder.txt
EOC
