#!/usr/bin/env ruby
# Usage: novac secgroup-list [pattern]
# Summary: List all Security Group Rules (except ping)
# Help: Pattern is an optional parameter to filter the group list.
# eg. novac secgroup-list 0.0.0.0 will show all rules that are open to the world.

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'novadb'

# List of required libraries
required_libs = ['terminal-table','mysql2']

# Try to load each of the libraries
# Fail if unable to and list what libs are needed
begin
  required_libs.each { |l| require l }
rescue LoadError
  puts "This script needs the following external libraries: "
  required_libs.each { |l| puts " * #{l}" }
  exit 1
end

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

if ARGV[0]
  secgroup_pattern = "%#{ARGV[0]}%"
else
  secgroup_pattern = '%'
end

# Get a list of clouds
novadb = NovaDB.new
cloud = novadb.cloud

rows = []
novadb.regions.each do |region|
  begin
    # Databases
    nova     = Mysql2::Client.new( :host => cloud[:server], :username => cloud[:username], :password => cloud[:password], :database => "nova_#{region}" )
    keystone = Mysql2::Client.new( :host => cloud[:server], :username => cloud[:username], :password => cloud[:password], :database => 'keystone' )

    # Prepared statements
    #project_query = keystone.prepare "select name from project where id = ?"

    # Query for all active security groups
    secgroup_query = "SELECT `from_port`, `to_port`, `cidr`, `project_id` FROM security_group_rules INNER JOIN security_groups ON security_groups.id=security_group_rules.parent_group_id WHERE security_group_rules.deleted = 0 AND security_group_rules.cidr LIKE '#{secgroup_pattern}' AND security_group_rules.from_port != -1;"

    secgroup_rs = nova.query secgroup_query
    secgroup_rs.each do |row|
      # Project name
      project = keystone.query("select name from project where id = '#{row['project_id']}'").first['name']

      # Build the output row
      #rows << [instance_id_short, project, user, region, row['hostname'], ec2_id, host_short, row['fixed_ip'], row['floating_ip'], row['vm_state'], row['flavor'], row['key_name'], image]
      rows << [ project, row['from_port'], row['to_port'], row['cidr'] ]
    end
  end
end

# Print report
headings = [ 'Project', 'Start Port', 'End Port', 'CIDR' ]

table = Terminal::Table.new :headings => headings, :rows => rows
puts table

