#!/usr/bin/env ruby
# Usage: novac list-volumes
# Summary: List all volumes in both regions
# Help: This command shows the ID, Name, Project, Status, Attach, Instance, Mountpoint, Size, Host, and Region

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'novadb'

# List of required libraries
required_libs = ['terminal-table','mysql2']

# Try to load each of the libraries
# Fail if unable to and list what libs are needed
begin
  required_libs.each { |l| require l }
rescue LoadError
  puts "This script needs the following external libraries: "
  required_libs.each { |l| puts " * #{l}" }
  exit 1
end

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Get a list of clouds
novadb = NovaDB.new

rows = {}
cloud = novadb.cloud
novadb.regions.each do |region|
  begin
    # Databases
    cinder = Mysql2::Client.new( :host => cloud[:server], :username => cloud[:username], :password => cloud[:password], :database => "cinder_#{region}" )
    keystone = Mysql2::Client.new( :host => cloud[:server], :username => cloud[:username], :password => cloud[:password], :database => 'keystone' )

    # Query for all active volumes
    volumes_query = "select volumes.id as id, volumes.project_id as project_id, size, instances.host as host, instances.display_name as instance, mountpoint, status, attach_status, volumes.display_name as volume from volumes left join nova_#{region}.instances on cinder_#{region}.volumes.instance_uuid=nova_#{region}.instances.uuid where status in ('in-use', 'available') order by volumes.display_name, status"

    volumes_rs = cinder.query volumes_query
    volumes_rs.each do |row|
      # Shorten the Instance ID
      volume_id_short = row['id'].split('-')[0]

      # Shorten the hostname
      if row['host']
        host = row['host'].split('.')[0]
      else
        host = ''
      end

      # Get the project name
      project_rs = keystone.query "select name from project where id = '#{row['project_id']}'"
      begin
        project = project_rs.first['name']
      rescue
        puts "WARNING. The following volume is not associated with an existing project: #{row['id']}"
        project = "z WARNING: PROJECT DOES NOT EXIST"
      end
      # Build the output row
      if not rows.has_key?(project)
        rows[project] = []
      end
      rows[project] << [volume_id_short, row['volume'], project, row['status'], row['attach_status'], row['instance'], row['mountpoint'], row['size'], host, region]
    end
  end
end

# Print report
headings = ['ID', 'Name', 'Project', 'Status', 'Attach Status', 'Instance', 'Mountpoint', 'Size (GB)', 'Host', 'Region']

# Sort based on project
r = []
rows.keys.sort!.each do |project|
  rows[project].each do |row|
    r << row
  end
end

table = Terminal::Table.new :headings => headings, :rows => r
puts table

