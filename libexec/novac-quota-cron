#!/usr/bin/env ruby
# Usage: novac quota-cron
# # Summary: Cron Helper Script to call novac quota-balance and then catch a corner case of when they exceed their quota. This should not be run manually
# # Help: Cron Helper Script. Should not be run manually.

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'helpers/quotas'
require 'helpers/projects'
require 'parallel'

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or sudo."
end

# novac command
novac = "/root/novac/bin/novac"

# Loop through all projects and see what users are over quota and what users aren't.
projects = Projects.new
quotas = Quotas.new

# Balance the usage between regions
quotas.balance_all_usage

Parallel.each(projects.enabled_projects.keys, :in_processes => 12) do |project_id|
  project = projects.projects[project_id]
  next if project == 'admin'
  quota = quotas.project_quota(project_id)['object_mb']
  used = quotas.object_storage_usage(project_id)['object_mb']
  used = 0 if not used
  quota = 0 if not quota
  # If the user is over quota, set their swift quota to 0 so they can't upload more.
  if used > quota
    command = "\"#{project}\" 0"
  # If they aren't over quota, set their swift quota to their configured quota.
  # This effectively re-enables uploads after the user deletes some files.
  else
    quota_in_bytes = quota * 1024 * 1024
    command = "\"#{project}\" #{quota_in_bytes}"
  end

  system("#{novac} swift-set-quota #{command}")
end
