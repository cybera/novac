#!/usr/bin/env ruby
# Usage: novac usage-report
# Summary: Shows percent of projects with active instances/volumes in total and per region.

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'novadb2'
require 'helpers/projects'

# List of required libraries
required_libs = ['terminal-table','mysql2','parallel']

# Try to load each of the libraries
# Fail if unable to and list what libs are needed
begin
  required_libs.each { |l| require l }
rescue LoadError
  puts "This script needs the following external libraries: "
  required_libs.each { |l| puts " * #{l}" }
  exit 1
end

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Total Counters

project_ever_had_instance_count = 0
project_with_active_instance_count = 0
project_ever_had_volume_count = 0
project_with_active_volume_count = 0

project_ever_had_instance_regional_count = {}
instance_in_region_count = {}
project_with_active_instance_regional_count = {}

project_ever_had_volume_regional_count = {}
volume_in_region_count = {}
project_with_active_volume_regional_count = {}
instance_count = {}
volume_count = {}

# Get a list of clouds
novadb = NovaDB2.instance
os_release = novadb.get_openstack_release
require "openstack/#{os_release}"
openstack = Object.const_get(os_release.capitalize).new

project_list = Projects.new
project_count = project_list.project_ids.count

#Init initial values for regions
novadb.regions.each do | region |
  project_ever_had_instance_regional_count[region] = 0
  instance_in_region_count[region] = 0
  project_with_active_instance_regional_count[region] = 0
  project_ever_had_volume_regional_count[region] = 0
  volume_in_region_count[region] = 0
  project_with_active_volume_regional_count[region] = 0
  instance_count[region] = openstack.instance_count(region)["count"][:count]
  volume_count[region] = openstack.volume_count(region)["count"][:count]
end

# Iterate through projects checking active and historically used resources in each region.
project_list.project_ids.each do |project_id|
  project = project_list.projects[project_id]
  cloud_active_flag = 0
  cloud_resource_flag = 0
  cloud_active_volume_flag = 0
  cloud_volume_flag = 0

  novadb.regions.each do | region |
    active_instance_count = openstack.active_instances_count(project_id, region)["count"][:count]
    deleted_instance_count = openstack.deleted_instances_count(project_id, region)["count"][:count]
    active_volume_count = openstack.active_volumes_count(project_id, region)["count"][:count]
    deleted_volume_count = openstack.deleted_volumes_count(project_id, region)["count"][:count]

    # Update project's counters for instances
    if(active_instance_count > 0)
      # Don't double count if active in both regions
      if(cloud_active_flag == 0 && cloud_resource_flag == 0)
        project_ever_had_instance_count += 1
        project_with_active_instance_count +=1
      # Catch events where deleted instances in region 1, but active in region N
      elsif (cloud_active_flag == 0)
        project_with_active_instance_count +=1
      end
      project_ever_had_instance_regional_count[region] += 1
      project_with_active_instance_regional_count[region] += 1
      instance_in_region_count[region] += (deleted_instance_count + active_instance_count)

      cloud_resource_flag = 1
      cloud_active_flag = 1

    elsif (deleted_instance_count > 0)
      if(cloud_resource_flag == 0)
        project_ever_had_instance_count += 1
      end
      project_ever_had_instance_regional_count[region] += 1
      instance_in_region_count[region] += deleted_instance_count
      cloud_resource_flag = 1
    end

    #Update project's counters for volumes
    if(active_volume_count > 0)
      # Don't double count if active in both regions
      if(cloud_active_volume_flag == 0 && cloud_volume_flag == 0)
        project_ever_had_volume_count += 1
        project_with_active_volume_count +=1
      # Catch events where deleted instances in region 1, but active in region N
      elsif (cloud_active_volume_flag == 0)
        project_with_active_volume_count +=1
      end
      project_ever_had_volume_regional_count[region] += 1
      project_with_active_volume_regional_count[region] += 1
      volume_in_region_count[region] += (deleted_volume_count + active_volume_count)

      cloud_volume_flag = 1
      cloud_active_volume_flag = 1

    elsif (deleted_volume_count > 0)
      if(cloud_volume_flag == 0)
        project_ever_had_volume_count += 1
      end
      project_ever_had_volume_regional_count[region] += 1
      volume_in_region_count[region] += deleted_volume_count
      cloud_volume_flag = 1
    end
  end
end

instance_total_count = 0
instance_in_region_count.each { |a| instance_total_count += a[1] }

instances_count = 0
instance_count.each { |a| instances_count += a[1] }

volume_total_count = 0
volume_in_region_count.each { |a| volume_total_count += a[1] }

volumes_count = 0
volume_count.each { |a| volumes_count += a[1] }

puts "Total Projects:               #{project_count}"
puts "Total Active Instances:       #{instances_count}"
puts "Total Active Volumes:         #{volumes_count}"
puts ""
puts "Total Ever Instances:         #{instance_total_count}"
puts "Total Ever Volumes:           #{volume_total_count}"
puts ""
puts "---"
puts ""
puts "Projects that Have:"
puts "Launched an Instance:         #{(project_ever_had_instance_count / project_count.to_f * 100).round()} % (#{project_ever_had_instance_count})"
puts "An Active Instance:           #{(project_with_active_instance_count / project_count.to_f * 100).round()} % (#{project_with_active_instance_count})"
puts "Created a Volume:             #{(project_ever_had_volume_count / project_count.to_f * 100).round()} % (#{project_ever_had_volume_count})"
puts "An Active Volume:             #{(project_with_active_volume_count / project_count.to_f * 100).round()} % (#{project_with_active_volume_count})"
puts ""
puts "Region Stats:"

novadb.regions.each do | region |
  puts "#{region}:"
  puts "Launched an Instance:         #{(project_ever_had_instance_regional_count[region] / project_count.to_f * 100).round()} % (#{project_ever_had_instance_regional_count[region]})"
  puts "Active Instances:             #{(project_with_active_instance_regional_count[region] / project_count.to_f * 100).round()} % (#{project_ever_had_instance_regional_count[region]})"
  puts "Created a Volume:             #{(volume_in_region_count[region] / project_count.to_f * 100).round()} % (#{volume_in_region_count[region]})"
  puts "Active Volume:                #{(project_with_active_volume_regional_count[region] / project_count.to_f * 100).round()} % (#{project_with_active_volume_regional_count[region]})"
  puts ""
end


