#!/usr/bin/env ruby
# Usage: novac list-images
# Summary: List all images and snapshots
# Help: Lists all images and snapshots on DAIR

$:.unshift File.expand_path("../../share/novac/lib/rb", __FILE__)
require 'rubygems'
require 'novadb'

# List of required libraries
required_libs = ['terminal-table','mysql']

# Try to load each of the libraries
# Fail if unable to and list what libs are needed
begin
  required_libs.each { |l| require l }
rescue LoadError
  puts "This script needs the following external libraries: "
  required_libs.each { |l| puts " * #{l}" }
  exit 1
end

# Ensure root or sudo is used for this command
if Process.euid != 0
  throw "Must run this script as root or use sudo."
end

# Get a list of clouds
novadb = NovaDB.new

rows = []
cloud = novadb.cloud
# Database
glance = Mysql.new cloud[:server], cloud[:username], cloud[:password], 'glance'

# Query for all active images
images_query = "select images.id, images.name as image_name, size, is_public, project.name as tenant_name from glance.images inner join keystone.project on keystone.project.id=glance.images.owner where glance.images.status = 'active' order by project.name"

images_rs = glance.query images_query
images_rs.each_hash do |row|

  # Get some extra data about the image
  base_image_ref = nil
  is_snapshot = 'No'
  image_query = "select name, value from image_properties where image_id = '#{row['id']}'"
  image_rs = glance.query image_query
  image_rs.each_hash do |image_row|
    case image_row['name']
    when 'image_location'
      if image_row['value'] == 'snapshot'
        is_snapshot = 'Yes'
      end
    when 'base_image_ref'
      base_image_ref = image_row['value']
    end
  end

  # Shorten the Instance ID
  images_id_short = row['id'].split('-')[0]

  # Yes/no for public
  if row['is_public'] == "1"
    is_public = 'Yes'
  else
    is_public = 'No'
  end

  # Size in GB
  size = sprintf("%.2f", (row['size'].to_i / 1024 / 1024 / 1024.0))

  # Get the base image
  if base_image_ref
    base_query = glance.query "select name from images where id = '#{base_image_ref}'"
    base_image_name = base_query.fetch_hash['name']
  else
    base_image_name = nil
  end

  # Build the output row
  rows << [images_id_short, row['image_name'], row['tenant_name'], is_snapshot, base_image_name, size, is_public]
end

# Print report
headings = ['ID', 'Name', 'Owner', 'Snapshot', 'Base Image', 'Size (GB)', 'Public']

table = Terminal::Table.new :headings => headings, :rows => rows
puts table

